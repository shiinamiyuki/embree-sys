/* automatically generated by rust-bindgen 0.64.0 */

pub const RTC_FORMAT_UNDEFINED: RTCFormat = 0;
pub const RTC_FORMAT_UCHAR: RTCFormat = 4097;
pub const RTC_FORMAT_UCHAR2: RTCFormat = 4098;
pub const RTC_FORMAT_UCHAR3: RTCFormat = 4099;
pub const RTC_FORMAT_UCHAR4: RTCFormat = 4100;
pub const RTC_FORMAT_CHAR: RTCFormat = 8193;
pub const RTC_FORMAT_CHAR2: RTCFormat = 8194;
pub const RTC_FORMAT_CHAR3: RTCFormat = 8195;
pub const RTC_FORMAT_CHAR4: RTCFormat = 8196;
pub const RTC_FORMAT_USHORT: RTCFormat = 12289;
pub const RTC_FORMAT_USHORT2: RTCFormat = 12290;
pub const RTC_FORMAT_USHORT3: RTCFormat = 12291;
pub const RTC_FORMAT_USHORT4: RTCFormat = 12292;
pub const RTC_FORMAT_SHORT: RTCFormat = 16385;
pub const RTC_FORMAT_SHORT2: RTCFormat = 16386;
pub const RTC_FORMAT_SHORT3: RTCFormat = 16387;
pub const RTC_FORMAT_SHORT4: RTCFormat = 16388;
pub const RTC_FORMAT_UINT: RTCFormat = 20481;
pub const RTC_FORMAT_UINT2: RTCFormat = 20482;
pub const RTC_FORMAT_UINT3: RTCFormat = 20483;
pub const RTC_FORMAT_UINT4: RTCFormat = 20484;
pub const RTC_FORMAT_INT: RTCFormat = 24577;
pub const RTC_FORMAT_INT2: RTCFormat = 24578;
pub const RTC_FORMAT_INT3: RTCFormat = 24579;
pub const RTC_FORMAT_INT4: RTCFormat = 24580;
pub const RTC_FORMAT_ULLONG: RTCFormat = 28673;
pub const RTC_FORMAT_ULLONG2: RTCFormat = 28674;
pub const RTC_FORMAT_ULLONG3: RTCFormat = 28675;
pub const RTC_FORMAT_ULLONG4: RTCFormat = 28676;
pub const RTC_FORMAT_LLONG: RTCFormat = 32769;
pub const RTC_FORMAT_LLONG2: RTCFormat = 32770;
pub const RTC_FORMAT_LLONG3: RTCFormat = 32771;
pub const RTC_FORMAT_LLONG4: RTCFormat = 32772;
pub const RTC_FORMAT_FLOAT: RTCFormat = 36865;
pub const RTC_FORMAT_FLOAT2: RTCFormat = 36866;
pub const RTC_FORMAT_FLOAT3: RTCFormat = 36867;
pub const RTC_FORMAT_FLOAT4: RTCFormat = 36868;
pub const RTC_FORMAT_FLOAT5: RTCFormat = 36869;
pub const RTC_FORMAT_FLOAT6: RTCFormat = 36870;
pub const RTC_FORMAT_FLOAT7: RTCFormat = 36871;
pub const RTC_FORMAT_FLOAT8: RTCFormat = 36872;
pub const RTC_FORMAT_FLOAT9: RTCFormat = 36873;
pub const RTC_FORMAT_FLOAT10: RTCFormat = 36874;
pub const RTC_FORMAT_FLOAT11: RTCFormat = 36875;
pub const RTC_FORMAT_FLOAT12: RTCFormat = 36876;
pub const RTC_FORMAT_FLOAT13: RTCFormat = 36877;
pub const RTC_FORMAT_FLOAT14: RTCFormat = 36878;
pub const RTC_FORMAT_FLOAT15: RTCFormat = 36879;
pub const RTC_FORMAT_FLOAT16: RTCFormat = 36880;
pub const RTC_FORMAT_FLOAT2X2_ROW_MAJOR: RTCFormat = 37154;
pub const RTC_FORMAT_FLOAT2X3_ROW_MAJOR: RTCFormat = 37155;
pub const RTC_FORMAT_FLOAT2X4_ROW_MAJOR: RTCFormat = 37156;
pub const RTC_FORMAT_FLOAT3X2_ROW_MAJOR: RTCFormat = 37170;
pub const RTC_FORMAT_FLOAT3X3_ROW_MAJOR: RTCFormat = 37171;
pub const RTC_FORMAT_FLOAT3X4_ROW_MAJOR: RTCFormat = 37172;
pub const RTC_FORMAT_FLOAT4X2_ROW_MAJOR: RTCFormat = 37186;
pub const RTC_FORMAT_FLOAT4X3_ROW_MAJOR: RTCFormat = 37187;
pub const RTC_FORMAT_FLOAT4X4_ROW_MAJOR: RTCFormat = 37188;
pub const RTC_FORMAT_FLOAT2X2_COLUMN_MAJOR: RTCFormat = 37410;
pub const RTC_FORMAT_FLOAT2X3_COLUMN_MAJOR: RTCFormat = 37411;
pub const RTC_FORMAT_FLOAT2X4_COLUMN_MAJOR: RTCFormat = 37412;
pub const RTC_FORMAT_FLOAT3X2_COLUMN_MAJOR: RTCFormat = 37426;
pub const RTC_FORMAT_FLOAT3X3_COLUMN_MAJOR: RTCFormat = 37427;
pub const RTC_FORMAT_FLOAT3X4_COLUMN_MAJOR: RTCFormat = 37428;
pub const RTC_FORMAT_FLOAT4X2_COLUMN_MAJOR: RTCFormat = 37442;
pub const RTC_FORMAT_FLOAT4X3_COLUMN_MAJOR: RTCFormat = 37443;
pub const RTC_FORMAT_FLOAT4X4_COLUMN_MAJOR: RTCFormat = 37444;
pub const RTC_FORMAT_GRID: RTCFormat = 40961;
pub type RTCFormat = ::std::os::raw::c_uint;
pub const RTC_BUILD_QUALITY_LOW: RTCBuildQuality = 0;
pub const RTC_BUILD_QUALITY_MEDIUM: RTCBuildQuality = 1;
pub const RTC_BUILD_QUALITY_HIGH: RTCBuildQuality = 2;
pub const RTC_BUILD_QUALITY_REFIT: RTCBuildQuality = 3;
pub type RTCBuildQuality = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCBounds {
    pub lower_x: f32,
    pub lower_y: f32,
    pub lower_z: f32,
    pub align0: f32,
    pub upper_x: f32,
    pub upper_y: f32,
    pub upper_z: f32,
    pub align1: f32,
}
#[test]
fn bindgen_test_layout_RTCBounds() {
    const UNINIT: ::std::mem::MaybeUninit<RTCBounds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCBounds>(),
        32usize,
        concat!("Size of: ", stringify!(RTCBounds))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBounds>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCBounds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(lower_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(lower_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(lower_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align0) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(align0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(upper_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(upper_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(upper_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align1) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBounds),
            "::",
            stringify!(align1)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCLinearBounds {
    pub bounds0: RTCBounds,
    pub bounds1: RTCBounds,
}
#[test]
fn bindgen_test_layout_RTCLinearBounds() {
    const UNINIT: ::std::mem::MaybeUninit<RTCLinearBounds> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCLinearBounds>(),
        64usize,
        concat!("Size of: ", stringify!(RTCLinearBounds))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCLinearBounds>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCLinearBounds))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCLinearBounds),
            "::",
            stringify!(bounds0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCLinearBounds),
            "::",
            stringify!(bounds1)
        )
    );
}
pub const RTC_FEATURE_FLAG_NONE: RTCFeatureFlags = 0;
pub const RTC_FEATURE_FLAG_MOTION_BLUR: RTCFeatureFlags = 1;
pub const RTC_FEATURE_FLAG_TRIANGLE: RTCFeatureFlags = 2;
pub const RTC_FEATURE_FLAG_QUAD: RTCFeatureFlags = 4;
pub const RTC_FEATURE_FLAG_GRID: RTCFeatureFlags = 8;
pub const RTC_FEATURE_FLAG_SUBDIVISION: RTCFeatureFlags = 16;
pub const RTC_FEATURE_FLAG_CONE_LINEAR_CURVE: RTCFeatureFlags = 32;
pub const RTC_FEATURE_FLAG_ROUND_LINEAR_CURVE: RTCFeatureFlags = 64;
pub const RTC_FEATURE_FLAG_FLAT_LINEAR_CURVE: RTCFeatureFlags = 128;
pub const RTC_FEATURE_FLAG_ROUND_BEZIER_CURVE: RTCFeatureFlags = 256;
pub const RTC_FEATURE_FLAG_FLAT_BEZIER_CURVE: RTCFeatureFlags = 512;
pub const RTC_FEATURE_FLAG_NORMAL_ORIENTED_BEZIER_CURVE: RTCFeatureFlags = 1024;
pub const RTC_FEATURE_FLAG_ROUND_BSPLINE_CURVE: RTCFeatureFlags = 2048;
pub const RTC_FEATURE_FLAG_FLAT_BSPLINE_CURVE: RTCFeatureFlags = 4096;
pub const RTC_FEATURE_FLAG_NORMAL_ORIENTED_BSPLINE_CURVE: RTCFeatureFlags = 8192;
pub const RTC_FEATURE_FLAG_ROUND_HERMITE_CURVE: RTCFeatureFlags = 16384;
pub const RTC_FEATURE_FLAG_FLAT_HERMITE_CURVE: RTCFeatureFlags = 32768;
pub const RTC_FEATURE_FLAG_NORMAL_ORIENTED_HERMITE_CURVE: RTCFeatureFlags = 65536;
pub const RTC_FEATURE_FLAG_ROUND_CATMULL_ROM_CURVE: RTCFeatureFlags = 131072;
pub const RTC_FEATURE_FLAG_FLAT_CATMULL_ROM_CURVE: RTCFeatureFlags = 262144;
pub const RTC_FEATURE_FLAG_NORMAL_ORIENTED_CATMULL_ROM_CURVE: RTCFeatureFlags = 524288;
pub const RTC_FEATURE_FLAG_SPHERE_POINT: RTCFeatureFlags = 1048576;
pub const RTC_FEATURE_FLAG_DISC_POINT: RTCFeatureFlags = 2097152;
pub const RTC_FEATURE_FLAG_ORIENTED_DISC_POINT: RTCFeatureFlags = 4194304;
pub const RTC_FEATURE_FLAG_POINT: RTCFeatureFlags = 7340032;
pub const RTC_FEATURE_FLAG_ROUND_CURVES: RTCFeatureFlags = 149824;
pub const RTC_FEATURE_FLAG_FLAT_CURVES: RTCFeatureFlags = 299648;
pub const RTC_FEATURE_FLAG_NORMAL_ORIENTED_CURVES: RTCFeatureFlags = 599040;
pub const RTC_FEATURE_FLAG_LINEAR_CURVES: RTCFeatureFlags = 224;
pub const RTC_FEATURE_FLAG_BEZIER_CURVES: RTCFeatureFlags = 1792;
pub const RTC_FEATURE_FLAG_BSPLINE_CURVES: RTCFeatureFlags = 14336;
pub const RTC_FEATURE_FLAG_HERMITE_CURVES: RTCFeatureFlags = 114688;
pub const RTC_FEATURE_FLAG_CURVES: RTCFeatureFlags = 1048544;
pub const RTC_FEATURE_FLAG_INSTANCE: RTCFeatureFlags = 8388608;
pub const RTC_FEATURE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS: RTCFeatureFlags = 16777216;
pub const RTC_FEATURE_FLAG_FILTER_FUNCTION_IN_GEOMETRY: RTCFeatureFlags = 33554432;
pub const RTC_FEATURE_FLAG_FILTER_FUNCTION: RTCFeatureFlags = 50331648;
pub const RTC_FEATURE_FLAG_USER_GEOMETRY_CALLBACK_IN_ARGUMENTS: RTCFeatureFlags = 67108864;
pub const RTC_FEATURE_FLAG_USER_GEOMETRY_CALLBACK_IN_GEOMETRY: RTCFeatureFlags = 134217728;
pub const RTC_FEATURE_FLAG_USER_GEOMETRY: RTCFeatureFlags = 201326592;
pub const RTC_FEATURE_FLAG_32_BIT_RAY_MASK: RTCFeatureFlags = 268435456;
pub const RTC_FEATURE_FLAG_ALL: RTCFeatureFlags = 4294967295;
pub type RTCFeatureFlags = ::std::os::raw::c_uint;
pub const RTC_RAY_QUERY_FLAG_NONE: RTCRayQueryFlags = 0;
pub const RTC_RAY_QUERY_FLAG_INVOKE_ARGUMENT_FILTER: RTCRayQueryFlags = 2;
pub const RTC_RAY_QUERY_FLAG_INCOHERENT: RTCRayQueryFlags = 0;
pub const RTC_RAY_QUERY_FLAG_COHERENT: RTCRayQueryFlags = 65536;
pub type RTCRayQueryFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCFilterFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub context: *mut RTCRayQueryContext,
    pub ray: *mut RTCRayN,
    pub hit: *mut RTCHitN,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCFilterFunctionNArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCFilterFunctionNArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCFilterFunctionNArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCFilterFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCFilterFunctionNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCFilterFunctionNArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCFilterFunctionNArguments),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCFilterFunctionNArguments),
            "::",
            stringify!(geometryUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCFilterFunctionNArguments),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCFilterFunctionNArguments),
            "::",
            stringify!(ray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCFilterFunctionNArguments),
            "::",
            stringify!(hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCFilterFunctionNArguments),
            "::",
            stringify!(N)
        )
    );
}
pub type RTCFilterFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCFilterFunctionNArguments)>;
pub type RTCIntersectFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCIntersectFunctionNArguments)>;
pub type RTCOccludedFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCOccludedFunctionNArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayQueryContext {
    pub instID: [::std::os::raw::c_uint; 1usize],
}
#[test]
fn bindgen_test_layout_RTCRayQueryContext() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRayQueryContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRayQueryContext>(),
        4usize,
        concat!("Size of: ", stringify!(RTCRayQueryContext))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayQueryContext>(),
        4usize,
        concat!("Alignment of ", stringify!(RTCRayQueryContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayQueryContext),
            "::",
            stringify!(instID)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub time: f32,
    pub radius: f32,
}
#[test]
fn bindgen_test_layout_RTCPointQuery() {
    const UNINIT: ::std::mem::MaybeUninit<RTCPointQuery> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery>(),
        32usize,
        concat!("Size of: ", stringify!(RTCPointQuery))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQuery))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery4 {
    pub x: [f32; 4usize],
    pub y: [f32; 4usize],
    pub z: [f32; 4usize],
    pub time: [f32; 4usize],
    pub radius: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_RTCPointQuery4() {
    const UNINIT: ::std::mem::MaybeUninit<RTCPointQuery4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery4>(),
        80usize,
        concat!("Size of: ", stringify!(RTCPointQuery4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQuery4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery4),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery4),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery8 {
    pub x: [f32; 8usize],
    pub y: [f32; 8usize],
    pub z: [f32; 8usize],
    pub time: [f32; 8usize],
    pub radius: [f32; 8usize],
}
#[test]
fn bindgen_test_layout_RTCPointQuery8() {
    const UNINIT: ::std::mem::MaybeUninit<RTCPointQuery8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery8>(),
        160usize,
        concat!("Size of: ", stringify!(RTCPointQuery8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCPointQuery8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery8),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery8),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery8),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery8),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery8),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQuery16 {
    pub x: [f32; 16usize],
    pub y: [f32; 16usize],
    pub z: [f32; 16usize],
    pub time: [f32; 16usize],
    pub radius: [f32; 16usize],
}
#[test]
fn bindgen_test_layout_RTCPointQuery16() {
    const UNINIT: ::std::mem::MaybeUninit<RTCPointQuery16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCPointQuery16>(),
        320usize,
        concat!("Size of: ", stringify!(RTCPointQuery16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQuery16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCPointQuery16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery16),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery16),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery16),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery16),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).radius) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQuery16),
            "::",
            stringify!(radius)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryContext {
    pub world2inst: [[f32; 16usize]; 1usize],
    pub inst2world: [[f32; 16usize]; 1usize],
    pub instID: [::std::os::raw::c_uint; 1usize],
    pub instStackSize: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCPointQueryContext() {
    const UNINIT: ::std::mem::MaybeUninit<RTCPointQueryContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCPointQueryContext>(),
        144usize,
        concat!("Size of: ", stringify!(RTCPointQueryContext))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQueryContext>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQueryContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).world2inst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryContext),
            "::",
            stringify!(world2inst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inst2world) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryContext),
            "::",
            stringify!(inst2world)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryContext),
            "::",
            stringify!(instID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instStackSize) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryContext),
            "::",
            stringify!(instStackSize)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCPointQueryFunctionArguments {
    pub query: *mut RTCPointQuery,
    pub userPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
    pub context: *mut RTCPointQueryContext,
    pub similarityScale: f32,
}
#[test]
fn bindgen_test_layout_RTCPointQueryFunctionArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCPointQueryFunctionArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCPointQueryFunctionArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCPointQueryFunctionArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCPointQueryFunctionArguments>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCPointQueryFunctionArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryFunctionArguments),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryFunctionArguments),
            "::",
            stringify!(userPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryFunctionArguments),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryFunctionArguments),
            "::",
            stringify!(geomID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryFunctionArguments),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).similarityScale) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCPointQueryFunctionArguments),
            "::",
            stringify!(similarityScale)
        )
    );
}
pub type RTCPointQueryFunction =
    ::std::option::Option<unsafe extern "C" fn(args: *mut RTCPointQueryFunctionArguments) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCDeviceTy {
    _unused: [u8; 0],
}
pub type RTCDevice = *mut RTCDeviceTy;
extern "C" {
    pub fn rtcNewDevice(config: *const ::std::os::raw::c_char) -> RTCDevice;
}
extern "C" {
    pub fn rtcRetainDevice(device: RTCDevice);
}
extern "C" {
    pub fn rtcReleaseDevice(device: RTCDevice);
}
pub const RTC_DEVICE_PROPERTY_VERSION: RTCDeviceProperty = 0;
pub const RTC_DEVICE_PROPERTY_VERSION_MAJOR: RTCDeviceProperty = 1;
pub const RTC_DEVICE_PROPERTY_VERSION_MINOR: RTCDeviceProperty = 2;
pub const RTC_DEVICE_PROPERTY_VERSION_PATCH: RTCDeviceProperty = 3;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY4_SUPPORTED: RTCDeviceProperty = 32;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY8_SUPPORTED: RTCDeviceProperty = 33;
pub const RTC_DEVICE_PROPERTY_NATIVE_RAY16_SUPPORTED: RTCDeviceProperty = 34;
pub const RTC_DEVICE_PROPERTY_BACKFACE_CULLING_CURVES_ENABLED: RTCDeviceProperty = 63;
pub const RTC_DEVICE_PROPERTY_RAY_MASK_SUPPORTED: RTCDeviceProperty = 64;
pub const RTC_DEVICE_PROPERTY_BACKFACE_CULLING_ENABLED: RTCDeviceProperty = 65;
pub const RTC_DEVICE_PROPERTY_FILTER_FUNCTION_SUPPORTED: RTCDeviceProperty = 66;
pub const RTC_DEVICE_PROPERTY_IGNORE_INVALID_RAYS_ENABLED: RTCDeviceProperty = 67;
pub const RTC_DEVICE_PROPERTY_COMPACT_POLYS_ENABLED: RTCDeviceProperty = 68;
pub const RTC_DEVICE_PROPERTY_TRIANGLE_GEOMETRY_SUPPORTED: RTCDeviceProperty = 96;
pub const RTC_DEVICE_PROPERTY_QUAD_GEOMETRY_SUPPORTED: RTCDeviceProperty = 97;
pub const RTC_DEVICE_PROPERTY_SUBDIVISION_GEOMETRY_SUPPORTED: RTCDeviceProperty = 98;
pub const RTC_DEVICE_PROPERTY_CURVE_GEOMETRY_SUPPORTED: RTCDeviceProperty = 99;
pub const RTC_DEVICE_PROPERTY_USER_GEOMETRY_SUPPORTED: RTCDeviceProperty = 100;
pub const RTC_DEVICE_PROPERTY_POINT_GEOMETRY_SUPPORTED: RTCDeviceProperty = 101;
pub const RTC_DEVICE_PROPERTY_TASKING_SYSTEM: RTCDeviceProperty = 128;
pub const RTC_DEVICE_PROPERTY_JOIN_COMMIT_SUPPORTED: RTCDeviceProperty = 129;
pub const RTC_DEVICE_PROPERTY_PARALLEL_COMMIT_SUPPORTED: RTCDeviceProperty = 130;
pub type RTCDeviceProperty = ::std::os::raw::c_uint;
extern "C" {
    pub fn rtcGetDeviceProperty(device: RTCDevice, prop: RTCDeviceProperty) -> isize;
}
extern "C" {
    pub fn rtcSetDeviceProperty(device: RTCDevice, prop: RTCDeviceProperty, value: isize);
}
pub const RTC_ERROR_NONE: RTCError = 0;
pub const RTC_ERROR_UNKNOWN: RTCError = 1;
pub const RTC_ERROR_INVALID_ARGUMENT: RTCError = 2;
pub const RTC_ERROR_INVALID_OPERATION: RTCError = 3;
pub const RTC_ERROR_OUT_OF_MEMORY: RTCError = 4;
pub const RTC_ERROR_UNSUPPORTED_CPU: RTCError = 5;
pub const RTC_ERROR_CANCELLED: RTCError = 6;
pub type RTCError = ::std::os::raw::c_uint;
extern "C" {
    pub fn rtcGetDeviceError(device: RTCDevice) -> RTCError;
}
pub type RTCErrorFunction = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        code: RTCError,
        str_: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn rtcSetDeviceErrorFunction(
        device: RTCDevice,
        error: RTCErrorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
pub type RTCMemoryMonitorFunction = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, bytes: isize, post: bool) -> bool,
>;
extern "C" {
    pub fn rtcSetDeviceMemoryMonitorFunction(
        device: RTCDevice,
        memoryMonitor: RTCMemoryMonitorFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
pub const RTC_BUFFER_TYPE_INDEX: RTCBufferType = 0;
pub const RTC_BUFFER_TYPE_VERTEX: RTCBufferType = 1;
pub const RTC_BUFFER_TYPE_VERTEX_ATTRIBUTE: RTCBufferType = 2;
pub const RTC_BUFFER_TYPE_NORMAL: RTCBufferType = 3;
pub const RTC_BUFFER_TYPE_TANGENT: RTCBufferType = 4;
pub const RTC_BUFFER_TYPE_NORMAL_DERIVATIVE: RTCBufferType = 5;
pub const RTC_BUFFER_TYPE_GRID: RTCBufferType = 8;
pub const RTC_BUFFER_TYPE_FACE: RTCBufferType = 16;
pub const RTC_BUFFER_TYPE_LEVEL: RTCBufferType = 17;
pub const RTC_BUFFER_TYPE_EDGE_CREASE_INDEX: RTCBufferType = 18;
pub const RTC_BUFFER_TYPE_EDGE_CREASE_WEIGHT: RTCBufferType = 19;
pub const RTC_BUFFER_TYPE_VERTEX_CREASE_INDEX: RTCBufferType = 20;
pub const RTC_BUFFER_TYPE_VERTEX_CREASE_WEIGHT: RTCBufferType = 21;
pub const RTC_BUFFER_TYPE_HOLE: RTCBufferType = 22;
pub const RTC_BUFFER_TYPE_FLAGS: RTCBufferType = 32;
pub type RTCBufferType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBufferTy {
    _unused: [u8; 0],
}
pub type RTCBuffer = *mut RTCBufferTy;
extern "C" {
    pub fn rtcNewBuffer(device: RTCDevice, byteSize: usize) -> RTCBuffer;
}
extern "C" {
    pub fn rtcNewSharedBuffer(
        device: RTCDevice,
        ptr: *mut ::std::os::raw::c_void,
        byteSize: usize,
    ) -> RTCBuffer;
}
extern "C" {
    pub fn rtcGetBufferData(buffer: RTCBuffer) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcRetainBuffer(buffer: RTCBuffer);
}
extern "C" {
    pub fn rtcReleaseBuffer(buffer: RTCBuffer);
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay {
    pub org_x: f32,
    pub org_y: f32,
    pub org_z: f32,
    pub tnear: f32,
    pub dir_x: f32,
    pub dir_y: f32,
    pub dir_z: f32,
    pub time: f32,
    pub tfar: f32,
    pub mask: ::std::os::raw::c_uint,
    pub id: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCRay() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRay>(),
        48usize,
        concat!("Size of: ", stringify!(RTCRay))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(org_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(org_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(org_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(tnear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(dir_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(dir_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(dir_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(tfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit {
    pub Ng_x: f32,
    pub Ng_y: f32,
    pub Ng_z: f32,
    pub u: f32,
    pub v: f32,
    pub primID: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
    pub instID: [::std::os::raw::c_uint; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit() {
    const UNINIT: ::std::mem::MaybeUninit<RTCHit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCHit>(),
        32usize,
        concat!("Size of: ", stringify!(RTCHit))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCHit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit),
            "::",
            stringify!(Ng_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit),
            "::",
            stringify!(Ng_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit),
            "::",
            stringify!(Ng_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        12usize,
        concat!("Offset of field: ", stringify!(RTCHit), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        16usize,
        concat!("Offset of field: ", stringify!(RTCHit), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit),
            "::",
            stringify!(geomID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit),
            "::",
            stringify!(instID)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit {
    pub ray: RTCRay,
    pub hit: RTCHit,
}
#[test]
fn bindgen_test_layout_RTCRayHit() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRayHit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit>(),
        80usize,
        concat!("Size of: ", stringify!(RTCRayHit))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRayHit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit),
            "::",
            stringify!(ray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit),
            "::",
            stringify!(hit)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay4 {
    pub org_x: [f32; 4usize],
    pub org_y: [f32; 4usize],
    pub org_z: [f32; 4usize],
    pub tnear: [f32; 4usize],
    pub dir_x: [f32; 4usize],
    pub dir_y: [f32; 4usize],
    pub dir_z: [f32; 4usize],
    pub time: [f32; 4usize],
    pub tfar: [f32; 4usize],
    pub mask: [::std::os::raw::c_uint; 4usize],
    pub id: [::std::os::raw::c_uint; 4usize],
    pub flags: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_RTCRay4() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRay4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRay4>(),
        192usize,
        concat!("Size of: ", stringify!(RTCRay4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRay4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(org_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(org_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(org_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(tnear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(dir_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(dir_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(dir_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(tfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay4),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit4 {
    pub Ng_x: [f32; 4usize],
    pub Ng_y: [f32; 4usize],
    pub Ng_z: [f32; 4usize],
    pub u: [f32; 4usize],
    pub v: [f32; 4usize],
    pub primID: [::std::os::raw::c_uint; 4usize],
    pub geomID: [::std::os::raw::c_uint; 4usize],
    pub instID: [[::std::os::raw::c_uint; 4usize]; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit4() {
    const UNINIT: ::std::mem::MaybeUninit<RTCHit4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCHit4>(),
        128usize,
        concat!("Size of: ", stringify!(RTCHit4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCHit4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(Ng_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(Ng_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(Ng_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(geomID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit4),
            "::",
            stringify!(instID)
        )
    );
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit4 {
    pub ray: RTCRay4,
    pub hit: RTCHit4,
}
#[test]
fn bindgen_test_layout_RTCRayHit4() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRayHit4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit4>(),
        320usize,
        concat!("Size of: ", stringify!(RTCRayHit4))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit4>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCRayHit4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit4),
            "::",
            stringify!(ray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit4),
            "::",
            stringify!(hit)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay8 {
    pub org_x: [f32; 8usize],
    pub org_y: [f32; 8usize],
    pub org_z: [f32; 8usize],
    pub tnear: [f32; 8usize],
    pub dir_x: [f32; 8usize],
    pub dir_y: [f32; 8usize],
    pub dir_z: [f32; 8usize],
    pub time: [f32; 8usize],
    pub tfar: [f32; 8usize],
    pub mask: [::std::os::raw::c_uint; 8usize],
    pub id: [::std::os::raw::c_uint; 8usize],
    pub flags: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_RTCRay8() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRay8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRay8>(),
        384usize,
        concat!("Size of: ", stringify!(RTCRay8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCRay8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(org_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(org_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(org_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(tnear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(dir_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(dir_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(dir_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(tfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay8),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit8 {
    pub Ng_x: [f32; 8usize],
    pub Ng_y: [f32; 8usize],
    pub Ng_z: [f32; 8usize],
    pub u: [f32; 8usize],
    pub v: [f32; 8usize],
    pub primID: [::std::os::raw::c_uint; 8usize],
    pub geomID: [::std::os::raw::c_uint; 8usize],
    pub instID: [[::std::os::raw::c_uint; 8usize]; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit8() {
    const UNINIT: ::std::mem::MaybeUninit<RTCHit8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCHit8>(),
        256usize,
        concat!("Size of: ", stringify!(RTCHit8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCHit8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(Ng_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(Ng_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(Ng_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(geomID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit8),
            "::",
            stringify!(instID)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit8 {
    pub ray: RTCRay8,
    pub hit: RTCHit8,
}
#[test]
fn bindgen_test_layout_RTCRayHit8() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRayHit8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit8>(),
        640usize,
        concat!("Size of: ", stringify!(RTCRayHit8))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit8>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCRayHit8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit8),
            "::",
            stringify!(ray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit8),
            "::",
            stringify!(hit)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRay16 {
    pub org_x: [f32; 16usize],
    pub org_y: [f32; 16usize],
    pub org_z: [f32; 16usize],
    pub tnear: [f32; 16usize],
    pub dir_x: [f32; 16usize],
    pub dir_y: [f32; 16usize],
    pub dir_z: [f32; 16usize],
    pub time: [f32; 16usize],
    pub tfar: [f32; 16usize],
    pub mask: [::std::os::raw::c_uint; 16usize],
    pub id: [::std::os::raw::c_uint; 16usize],
    pub flags: [::std::os::raw::c_uint; 16usize],
}
#[test]
fn bindgen_test_layout_RTCRay16() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRay16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRay16>(),
        768usize,
        concat!("Size of: ", stringify!(RTCRay16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRay16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCRay16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(org_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_y) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(org_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).org_z) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(org_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tnear) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(tnear)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_x) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(dir_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_y) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(dir_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir_z) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(dir_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfar) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(tfar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRay16),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCHit16 {
    pub Ng_x: [f32; 16usize],
    pub Ng_y: [f32; 16usize],
    pub Ng_z: [f32; 16usize],
    pub u: [f32; 16usize],
    pub v: [f32; 16usize],
    pub primID: [::std::os::raw::c_uint; 16usize],
    pub geomID: [::std::os::raw::c_uint; 16usize],
    pub instID: [[::std::os::raw::c_uint; 16usize]; 1usize],
}
#[test]
fn bindgen_test_layout_RTCHit16() {
    const UNINIT: ::std::mem::MaybeUninit<RTCHit16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCHit16>(),
        512usize,
        concat!("Size of: ", stringify!(RTCHit16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCHit16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCHit16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(Ng_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(Ng_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(Ng_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(geomID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instID) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCHit16),
            "::",
            stringify!(instID)
        )
    );
}
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHit16 {
    pub ray: RTCRay16,
    pub hit: RTCHit16,
}
#[test]
fn bindgen_test_layout_RTCRayHit16() {
    const UNINIT: ::std::mem::MaybeUninit<RTCRayHit16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCRayHit16>(),
        1280usize,
        concat!("Size of: ", stringify!(RTCRayHit16))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCRayHit16>(),
        64usize,
        concat!("Alignment of ", stringify!(RTCRayHit16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit16),
            "::",
            stringify!(ray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hit) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCRayHit16),
            "::",
            stringify!(hit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCHitN {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCRayHitN {
    _unused: [u8; 0],
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct RTCQuaternionDecomposition {
    pub scale_x: f32,
    pub scale_y: f32,
    pub scale_z: f32,
    pub skew_xy: f32,
    pub skew_xz: f32,
    pub skew_yz: f32,
    pub shift_x: f32,
    pub shift_y: f32,
    pub shift_z: f32,
    pub quaternion_r: f32,
    pub quaternion_i: f32,
    pub quaternion_j: f32,
    pub quaternion_k: f32,
    pub translation_x: f32,
    pub translation_y: f32,
    pub translation_z: f32,
}
#[test]
fn bindgen_test_layout_RTCQuaternionDecomposition() {
    const UNINIT: ::std::mem::MaybeUninit<RTCQuaternionDecomposition> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCQuaternionDecomposition>(),
        64usize,
        concat!("Size of: ", stringify!(RTCQuaternionDecomposition))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCQuaternionDecomposition>(),
        16usize,
        concat!("Alignment of ", stringify!(RTCQuaternionDecomposition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(scale_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(scale_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale_z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(scale_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skew_xy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(skew_xy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skew_xz) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(skew_xz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).skew_yz) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(skew_yz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift_x) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(shift_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift_y) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(shift_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shift_z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(shift_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quaternion_r) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(quaternion_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quaternion_i) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(quaternion_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quaternion_j) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(quaternion_j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quaternion_k) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(quaternion_k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).translation_x) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(translation_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).translation_y) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(translation_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).translation_z) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCQuaternionDecomposition),
            "::",
            stringify!(translation_z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCSceneTy {
    _unused: [u8; 0],
}
pub type RTCScene = *mut RTCSceneTy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCGeometryTy {
    _unused: [u8; 0],
}
pub type RTCGeometry = *mut RTCGeometryTy;
pub const RTC_GEOMETRY_TYPE_TRIANGLE: RTCGeometryType = 0;
pub const RTC_GEOMETRY_TYPE_QUAD: RTCGeometryType = 1;
pub const RTC_GEOMETRY_TYPE_GRID: RTCGeometryType = 2;
pub const RTC_GEOMETRY_TYPE_SUBDIVISION: RTCGeometryType = 8;
pub const RTC_GEOMETRY_TYPE_CONE_LINEAR_CURVE: RTCGeometryType = 15;
pub const RTC_GEOMETRY_TYPE_ROUND_LINEAR_CURVE: RTCGeometryType = 16;
pub const RTC_GEOMETRY_TYPE_FLAT_LINEAR_CURVE: RTCGeometryType = 17;
pub const RTC_GEOMETRY_TYPE_ROUND_BEZIER_CURVE: RTCGeometryType = 24;
pub const RTC_GEOMETRY_TYPE_FLAT_BEZIER_CURVE: RTCGeometryType = 25;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BEZIER_CURVE: RTCGeometryType = 26;
pub const RTC_GEOMETRY_TYPE_ROUND_BSPLINE_CURVE: RTCGeometryType = 32;
pub const RTC_GEOMETRY_TYPE_FLAT_BSPLINE_CURVE: RTCGeometryType = 33;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_BSPLINE_CURVE: RTCGeometryType = 34;
pub const RTC_GEOMETRY_TYPE_ROUND_HERMITE_CURVE: RTCGeometryType = 40;
pub const RTC_GEOMETRY_TYPE_FLAT_HERMITE_CURVE: RTCGeometryType = 41;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_HERMITE_CURVE: RTCGeometryType = 42;
pub const RTC_GEOMETRY_TYPE_SPHERE_POINT: RTCGeometryType = 50;
pub const RTC_GEOMETRY_TYPE_DISC_POINT: RTCGeometryType = 51;
pub const RTC_GEOMETRY_TYPE_ORIENTED_DISC_POINT: RTCGeometryType = 52;
pub const RTC_GEOMETRY_TYPE_ROUND_CATMULL_ROM_CURVE: RTCGeometryType = 58;
pub const RTC_GEOMETRY_TYPE_FLAT_CATMULL_ROM_CURVE: RTCGeometryType = 59;
pub const RTC_GEOMETRY_TYPE_NORMAL_ORIENTED_CATMULL_ROM_CURVE: RTCGeometryType = 60;
pub const RTC_GEOMETRY_TYPE_USER: RTCGeometryType = 120;
pub const RTC_GEOMETRY_TYPE_INSTANCE: RTCGeometryType = 121;
pub type RTCGeometryType = ::std::os::raw::c_uint;
pub const RTC_SUBDIVISION_MODE_NO_BOUNDARY: RTCSubdivisionMode = 0;
pub const RTC_SUBDIVISION_MODE_SMOOTH_BOUNDARY: RTCSubdivisionMode = 1;
pub const RTC_SUBDIVISION_MODE_PIN_CORNERS: RTCSubdivisionMode = 2;
pub const RTC_SUBDIVISION_MODE_PIN_BOUNDARY: RTCSubdivisionMode = 3;
pub const RTC_SUBDIVISION_MODE_PIN_ALL: RTCSubdivisionMode = 4;
pub type RTCSubdivisionMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBoundsFunctionArguments {
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub timeStep: ::std::os::raw::c_uint,
    pub bounds_o: *mut RTCBounds,
}
#[test]
fn bindgen_test_layout_RTCBoundsFunctionArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCBoundsFunctionArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCBoundsFunctionArguments>(),
        24usize,
        concat!("Size of: ", stringify!(RTCBoundsFunctionArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBoundsFunctionArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCBoundsFunctionArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBoundsFunctionArguments),
            "::",
            stringify!(geometryUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBoundsFunctionArguments),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeStep) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBoundsFunctionArguments),
            "::",
            stringify!(timeStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds_o) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBoundsFunctionArguments),
            "::",
            stringify!(bounds_o)
        )
    );
}
pub type RTCBoundsFunction =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCBoundsFunctionArguments)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCIntersectFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub context: *mut RTCRayQueryContext,
    pub rayhit: *mut RTCRayHitN,
    pub N: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCIntersectFunctionNArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCIntersectFunctionNArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCIntersectFunctionNArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCIntersectFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCIntersectFunctionNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCIntersectFunctionNArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(geometryUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rayhit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(rayhit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectFunctionNArguments),
            "::",
            stringify!(geomID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCOccludedFunctionNArguments {
    pub valid: *mut ::std::os::raw::c_int,
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub primID: ::std::os::raw::c_uint,
    pub context: *mut RTCRayQueryContext,
    pub ray: *mut RTCRayN,
    pub N: ::std::os::raw::c_uint,
    pub geomID: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCOccludedFunctionNArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCOccludedFunctionNArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCOccludedFunctionNArguments>(),
        48usize,
        concat!("Size of: ", stringify!(RTCOccludedFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCOccludedFunctionNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCOccludedFunctionNArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(geometryUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ray) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(ray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedFunctionNArguments),
            "::",
            stringify!(geomID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCDisplacementFunctionNArguments {
    pub geometryUserPtr: *mut ::std::os::raw::c_void,
    pub geometry: RTCGeometry,
    pub primID: ::std::os::raw::c_uint,
    pub timeStep: ::std::os::raw::c_uint,
    pub u: *const f32,
    pub v: *const f32,
    pub Ng_x: *const f32,
    pub Ng_y: *const f32,
    pub Ng_z: *const f32,
    pub P_x: *mut f32,
    pub P_y: *mut f32,
    pub P_z: *mut f32,
    pub N: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCDisplacementFunctionNArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCDisplacementFunctionNArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCDisplacementFunctionNArguments>(),
        96usize,
        concat!("Size of: ", stringify!(RTCDisplacementFunctionNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCDisplacementFunctionNArguments>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RTCDisplacementFunctionNArguments)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometryUserPtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(geometryUserPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeStep) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(timeStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_x) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(Ng_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_y) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(Ng_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ng_z) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(Ng_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).P_x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(P_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).P_y) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(P_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).P_z) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(P_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCDisplacementFunctionNArguments),
            "::",
            stringify!(N)
        )
    );
}
pub type RTCDisplacementFunctionN =
    ::std::option::Option<unsafe extern "C" fn(args: *const RTCDisplacementFunctionNArguments)>;
extern "C" {
    pub fn rtcNewGeometry(device: RTCDevice, type_: RTCGeometryType) -> RTCGeometry;
}
extern "C" {
    pub fn rtcRetainGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcReleaseGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcCommitGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcEnableGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcDisableGeometry(geometry: RTCGeometry);
}
extern "C" {
    pub fn rtcSetGeometryTimeStepCount(
        geometry: RTCGeometry,
        timeStepCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryTimeRange(geometry: RTCGeometry, startTime: f32, endTime: f32);
}
extern "C" {
    pub fn rtcSetGeometryVertexAttributeCount(
        geometry: RTCGeometry,
        vertexAttributeCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryMask(geometry: RTCGeometry, mask: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rtcSetGeometryBuildQuality(geometry: RTCGeometry, quality: RTCBuildQuality);
}
extern "C" {
    pub fn rtcSetGeometryMaxRadiusScale(geometry: RTCGeometry, maxRadiusScale: f32);
}
extern "C" {
    pub fn rtcSetGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        buffer: RTCBuffer,
        byteOffset: usize,
        byteStride: usize,
        itemCount: usize,
    );
}
extern "C" {
    pub fn rtcSetSharedGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        ptr: *const ::std::os::raw::c_void,
        byteOffset: usize,
        byteStride: usize,
        itemCount: usize,
    );
}
extern "C" {
    pub fn rtcSetNewGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
        format: RTCFormat,
        byteStride: usize,
        itemCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcGetGeometryBufferData(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcUpdateGeometryBuffer(
        geometry: RTCGeometry,
        type_: RTCBufferType,
        slot: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryIntersectFilterFunction(geometry: RTCGeometry, filter: RTCFilterFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryOccludedFilterFunction(geometry: RTCGeometry, filter: RTCFilterFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryEnableFilterFunctionFromArguments(geometry: RTCGeometry, enable: bool);
}
extern "C" {
    pub fn rtcSetGeometryUserData(geometry: RTCGeometry, ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn rtcGetGeometryUserData(geometry: RTCGeometry) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcSetGeometryPointQueryFunction(
        geometry: RTCGeometry,
        pointQuery: RTCPointQueryFunction,
    );
}
extern "C" {
    pub fn rtcSetGeometryUserPrimitiveCount(
        geometry: RTCGeometry,
        userPrimitiveCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryBoundsFunction(
        geometry: RTCGeometry,
        bounds: RTCBoundsFunction,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryIntersectFunction(geometry: RTCGeometry, intersect: RTCIntersectFunctionN);
}
extern "C" {
    pub fn rtcSetGeometryOccludedFunction(geometry: RTCGeometry, occluded: RTCOccludedFunctionN);
}
extern "C" {
    pub fn rtcInvokeIntersectFilterFromGeometry(
        args: *const RTCIntersectFunctionNArguments,
        filterArgs: *const RTCFilterFunctionNArguments,
    );
}
extern "C" {
    pub fn rtcInvokeOccludedFilterFromGeometry(
        args: *const RTCOccludedFunctionNArguments,
        filterArgs: *const RTCFilterFunctionNArguments,
    );
}
extern "C" {
    pub fn rtcSetGeometryInstancedScene(geometry: RTCGeometry, scene: RTCScene);
}
extern "C" {
    pub fn rtcSetGeometryTransform(
        geometry: RTCGeometry,
        timeStep: ::std::os::raw::c_uint,
        format: RTCFormat,
        xfm: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryTransformQuaternion(
        geometry: RTCGeometry,
        timeStep: ::std::os::raw::c_uint,
        qd: *const RTCQuaternionDecomposition,
    );
}
extern "C" {
    pub fn rtcGetGeometryTransform(
        geometry: RTCGeometry,
        time: f32,
        format: RTCFormat,
        xfm: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetGeometryTessellationRate(geometry: RTCGeometry, tessellationRate: f32);
}
extern "C" {
    pub fn rtcSetGeometryTopologyCount(
        geometry: RTCGeometry,
        topologyCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometrySubdivisionMode(
        geometry: RTCGeometry,
        topologyID: ::std::os::raw::c_uint,
        mode: RTCSubdivisionMode,
    );
}
extern "C" {
    pub fn rtcSetGeometryVertexAttributeTopology(
        geometry: RTCGeometry,
        vertexAttributeID: ::std::os::raw::c_uint,
        topologyID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcSetGeometryDisplacementFunction(
        geometry: RTCGeometry,
        displacement: RTCDisplacementFunctionN,
    );
}
extern "C" {
    pub fn rtcGetGeometryFirstHalfEdge(
        geometry: RTCGeometry,
        faceID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryFace(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryNextHalfEdge(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryPreviousHalfEdge(
        geometry: RTCGeometry,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcGetGeometryOppositeHalfEdge(
        geometry: RTCGeometry,
        topologyID: ::std::os::raw::c_uint,
        edgeID: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCInterpolateArguments {
    pub geometry: RTCGeometry,
    pub primID: ::std::os::raw::c_uint,
    pub u: f32,
    pub v: f32,
    pub bufferType: RTCBufferType,
    pub bufferSlot: ::std::os::raw::c_uint,
    pub P: *mut f32,
    pub dPdu: *mut f32,
    pub dPdv: *mut f32,
    pub ddPdudu: *mut f32,
    pub ddPdvdv: *mut f32,
    pub ddPdudv: *mut f32,
    pub valueCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCInterpolateArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCInterpolateArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCInterpolateArguments>(),
        88usize,
        concat!("Size of: ", stringify!(RTCInterpolateArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCInterpolateArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCInterpolateArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(primID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(bufferType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSlot) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(bufferSlot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).P) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPdu) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(dPdu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPdv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(dPdv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddPdudu) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(ddPdudu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddPdvdv) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(ddPdvdv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddPdudv) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(ddPdudv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueCount) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateArguments),
            "::",
            stringify!(valueCount)
        )
    );
}
extern "C" {
    pub fn rtcInterpolate(args: *const RTCInterpolateArguments);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCInterpolateNArguments {
    pub geometry: RTCGeometry,
    pub valid: *const ::std::os::raw::c_void,
    pub primIDs: *const ::std::os::raw::c_uint,
    pub u: *const f32,
    pub v: *const f32,
    pub N: ::std::os::raw::c_uint,
    pub bufferType: RTCBufferType,
    pub bufferSlot: ::std::os::raw::c_uint,
    pub P: *mut f32,
    pub dPdu: *mut f32,
    pub dPdv: *mut f32,
    pub ddPdudu: *mut f32,
    pub ddPdvdv: *mut f32,
    pub ddPdudv: *mut f32,
    pub valueCount: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCInterpolateNArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCInterpolateNArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCInterpolateNArguments>(),
        112usize,
        concat!("Size of: ", stringify!(RTCInterpolateNArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCInterpolateNArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCInterpolateNArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geometry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(geometry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primIDs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(primIDs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).N) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(N)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferType) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(bufferType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSlot) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(bufferSlot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).P) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(P)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPdu) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(dPdu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dPdv) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(dPdv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddPdudu) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(ddPdudu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddPdvdv) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(ddPdvdv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ddPdudv) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(ddPdudv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valueCount) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCInterpolateNArguments),
            "::",
            stringify!(valueCount)
        )
    );
}
extern "C" {
    pub fn rtcInterpolateN(args: *const RTCInterpolateNArguments);
}
pub const RTC_SCENE_FLAG_NONE: RTCSceneFlags = 0;
pub const RTC_SCENE_FLAG_DYNAMIC: RTCSceneFlags = 1;
pub const RTC_SCENE_FLAG_COMPACT: RTCSceneFlags = 2;
pub const RTC_SCENE_FLAG_ROBUST: RTCSceneFlags = 4;
pub const RTC_SCENE_FLAG_FILTER_FUNCTION_IN_ARGUMENTS: RTCSceneFlags = 8;
pub type RTCSceneFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCIntersectArguments {
    pub flags: RTCRayQueryFlags,
    pub feature_mask: RTCFeatureFlags,
    pub context: *mut RTCRayQueryContext,
    pub filter: RTCFilterFunctionN,
    pub intersect: RTCIntersectFunctionN,
}
#[test]
fn bindgen_test_layout_RTCIntersectArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCIntersectArguments> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCIntersectArguments>(),
        32usize,
        concat!("Size of: ", stringify!(RTCIntersectArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCIntersectArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCIntersectArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectArguments),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectArguments),
            "::",
            stringify!(feature_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectArguments),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectArguments),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intersect) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCIntersectArguments),
            "::",
            stringify!(intersect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCOccludedArguments {
    pub flags: RTCRayQueryFlags,
    pub feature_mask: RTCFeatureFlags,
    pub context: *mut RTCRayQueryContext,
    pub filter: RTCFilterFunctionN,
    pub occluded: RTCOccludedFunctionN,
}
#[test]
fn bindgen_test_layout_RTCOccludedArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCOccludedArguments> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCOccludedArguments>(),
        32usize,
        concat!("Size of: ", stringify!(RTCOccludedArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCOccludedArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCOccludedArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedArguments),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).feature_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedArguments),
            "::",
            stringify!(feature_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedArguments),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedArguments),
            "::",
            stringify!(filter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).occluded) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCOccludedArguments),
            "::",
            stringify!(occluded)
        )
    );
}
extern "C" {
    pub fn rtcNewScene(device: RTCDevice) -> RTCScene;
}
extern "C" {
    pub fn rtcGetSceneDevice(hscene: RTCScene) -> RTCDevice;
}
extern "C" {
    pub fn rtcRetainScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcReleaseScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcAttachGeometry(scene: RTCScene, geometry: RTCGeometry) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn rtcAttachGeometryByID(
        scene: RTCScene,
        geometry: RTCGeometry,
        geomID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcDetachGeometry(scene: RTCScene, geomID: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rtcGetGeometry(scene: RTCScene, geomID: ::std::os::raw::c_uint) -> RTCGeometry;
}
extern "C" {
    pub fn rtcGetGeometryThreadSafe(scene: RTCScene, geomID: ::std::os::raw::c_uint)
        -> RTCGeometry;
}
extern "C" {
    pub fn rtcGetGeometryUserDataFromScene(
        scene: RTCScene,
        geomID: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcCommitScene(scene: RTCScene);
}
extern "C" {
    pub fn rtcJoinCommitScene(scene: RTCScene);
}
pub type RTCProgressMonitorFunction =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, n: f64) -> bool>;
extern "C" {
    pub fn rtcSetSceneProgressMonitorFunction(
        scene: RTCScene,
        progress: RTCProgressMonitorFunction,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rtcSetSceneBuildQuality(scene: RTCScene, quality: RTCBuildQuality);
}
extern "C" {
    pub fn rtcSetSceneFlags(scene: RTCScene, flags: RTCSceneFlags);
}
extern "C" {
    pub fn rtcGetSceneFlags(scene: RTCScene) -> RTCSceneFlags;
}
extern "C" {
    pub fn rtcGetSceneBounds(scene: RTCScene, bounds_o: *mut RTCBounds);
}
extern "C" {
    pub fn rtcGetSceneLinearBounds(scene: RTCScene, bounds_o: *mut RTCLinearBounds);
}
extern "C" {
    pub fn rtcPointQuery(
        scene: RTCScene,
        query: *mut RTCPointQuery,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery4,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery8,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcPointQuery16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        query: *mut RTCPointQuery16,
        context: *mut RTCPointQueryContext,
        queryFunc: RTCPointQueryFunction,
        userPtr: *mut *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn rtcIntersect1(scene: RTCScene, rayhit: *mut RTCRayHit, args: *mut RTCIntersectArguments);
}
extern "C" {
    pub fn rtcIntersect4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        rayhit: *mut RTCRayHit4,
        args: *mut RTCIntersectArguments,
    );
}
extern "C" {
    pub fn rtcIntersect8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        rayhit: *mut RTCRayHit8,
        args: *mut RTCIntersectArguments,
    );
}
extern "C" {
    pub fn rtcIntersect16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        rayhit: *mut RTCRayHit16,
        args: *mut RTCIntersectArguments,
    );
}
extern "C" {
    pub fn rtcForwardIntersect1(
        args: *const RTCIntersectFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcForwardIntersect4(
        valid: *const ::std::os::raw::c_int,
        args: *const RTCIntersectFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay4,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcForwardIntersect8(
        valid: *const ::std::os::raw::c_int,
        args: *const RTCIntersectFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay8,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcForwardIntersect16(
        valid: *const ::std::os::raw::c_int,
        args: *const RTCIntersectFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay16,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcOccluded1(scene: RTCScene, ray: *mut RTCRay, args: *mut RTCOccludedArguments);
}
extern "C" {
    pub fn rtcOccluded4(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        ray: *mut RTCRay4,
        args: *mut RTCOccludedArguments,
    );
}
extern "C" {
    pub fn rtcOccluded8(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        ray: *mut RTCRay8,
        args: *mut RTCOccludedArguments,
    );
}
extern "C" {
    pub fn rtcOccluded16(
        valid: *const ::std::os::raw::c_int,
        scene: RTCScene,
        ray: *mut RTCRay16,
        args: *mut RTCOccludedArguments,
    );
}
extern "C" {
    pub fn rtcForwardOccluded1(
        args: *const RTCOccludedFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcForwardOccluded4(
        valid: *const ::std::os::raw::c_int,
        args: *const RTCOccludedFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay4,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcForwardOccluded8(
        valid: *const ::std::os::raw::c_int,
        args: *const RTCOccludedFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay8,
        instID: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn rtcForwardOccluded16(
        valid: *const ::std::os::raw::c_int,
        args: *const RTCOccludedFunctionNArguments,
        scene: RTCScene,
        ray: *mut RTCRay16,
        instID: ::std::os::raw::c_uint,
    );
}
#[doc = " collision callback"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCCollision {
    pub geomID0: ::std::os::raw::c_uint,
    pub primID0: ::std::os::raw::c_uint,
    pub geomID1: ::std::os::raw::c_uint,
    pub primID1: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCCollision() {
    const UNINIT: ::std::mem::MaybeUninit<RTCCollision> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCCollision>(),
        16usize,
        concat!("Size of: ", stringify!(RTCCollision))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCCollision>(),
        4usize,
        concat!("Alignment of ", stringify!(RTCCollision))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCCollision),
            "::",
            stringify!(geomID0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCCollision),
            "::",
            stringify!(primID0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCCollision),
            "::",
            stringify!(geomID1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCCollision),
            "::",
            stringify!(primID1)
        )
    );
}
pub type RTCCollideFunc = ::std::option::Option<
    unsafe extern "C" fn(
        userPtr: *mut ::std::os::raw::c_void,
        collisions: *mut RTCCollision,
        num_collisions: ::std::os::raw::c_uint,
    ),
>;
extern "C" {
    #[doc = " Performs collision detection of two scenes"]
    pub fn rtcCollide(
        scene0: RTCScene,
        scene1: RTCScene,
        callback: RTCCollideFunc,
        userPtr: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBVHTy {
    _unused: [u8; 0],
}
pub type RTCBVH = *mut RTCBVHTy;
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone)]
pub struct RTCBuildPrimitive {
    pub lower_x: f32,
    pub lower_y: f32,
    pub lower_z: f32,
    pub geomID: ::std::os::raw::c_uint,
    pub upper_x: f32,
    pub upper_y: f32,
    pub upper_z: f32,
    pub primID: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_RTCBuildPrimitive() {
    const UNINIT: ::std::mem::MaybeUninit<RTCBuildPrimitive> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCBuildPrimitive>(),
        32usize,
        concat!("Size of: ", stringify!(RTCBuildPrimitive))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBuildPrimitive>(),
        32usize,
        concat!("Alignment of ", stringify!(RTCBuildPrimitive))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(lower_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(lower_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lower_z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(lower_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).geomID) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(geomID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(upper_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_y) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(upper_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).upper_z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(upper_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primID) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildPrimitive),
            "::",
            stringify!(primID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCThreadLocalAllocatorTy {
    _unused: [u8; 0],
}
pub type RTCThreadLocalAllocator = *mut RTCThreadLocalAllocatorTy;
pub type RTCCreateNodeFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: RTCThreadLocalAllocator,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RTCSetNodeChildrenFunction = ::std::option::Option<
    unsafe extern "C" fn(
        nodePtr: *mut ::std::os::raw::c_void,
        children: *mut *mut ::std::os::raw::c_void,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type RTCSetNodeBoundsFunction = ::std::option::Option<
    unsafe extern "C" fn(
        nodePtr: *mut ::std::os::raw::c_void,
        bounds: *mut *const RTCBounds,
        childCount: ::std::os::raw::c_uint,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub type RTCCreateLeafFunction = ::std::option::Option<
    unsafe extern "C" fn(
        allocator: RTCThreadLocalAllocator,
        primitives: *const RTCBuildPrimitive,
        primitiveCount: usize,
        userPtr: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type RTCSplitPrimitiveFunction = ::std::option::Option<
    unsafe extern "C" fn(
        primitive: *const RTCBuildPrimitive,
        dimension: ::std::os::raw::c_uint,
        position: f32,
        leftBounds: *mut RTCBounds,
        rightBounds: *mut RTCBounds,
        userPtr: *mut ::std::os::raw::c_void,
    ),
>;
pub const RTC_BUILD_FLAG_NONE: RTCBuildFlags = 0;
pub const RTC_BUILD_FLAG_DYNAMIC: RTCBuildFlags = 1;
pub type RTCBuildFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTCBuildArguments {
    pub byteSize: usize,
    pub buildQuality: RTCBuildQuality,
    pub buildFlags: RTCBuildFlags,
    pub maxBranchingFactor: ::std::os::raw::c_uint,
    pub maxDepth: ::std::os::raw::c_uint,
    pub sahBlockSize: ::std::os::raw::c_uint,
    pub minLeafSize: ::std::os::raw::c_uint,
    pub maxLeafSize: ::std::os::raw::c_uint,
    pub traversalCost: f32,
    pub intersectionCost: f32,
    pub bvh: RTCBVH,
    pub primitives: *mut RTCBuildPrimitive,
    pub primitiveCount: usize,
    pub primitiveArrayCapacity: usize,
    pub createNode: RTCCreateNodeFunction,
    pub setNodeChildren: RTCSetNodeChildrenFunction,
    pub setNodeBounds: RTCSetNodeBoundsFunction,
    pub createLeaf: RTCCreateLeafFunction,
    pub splitPrimitive: RTCSplitPrimitiveFunction,
    pub buildProgress: RTCProgressMonitorFunction,
    pub userPtr: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_RTCBuildArguments() {
    const UNINIT: ::std::mem::MaybeUninit<RTCBuildArguments> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RTCBuildArguments>(),
        136usize,
        concat!("Size of: ", stringify!(RTCBuildArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<RTCBuildArguments>(),
        8usize,
        concat!("Alignment of ", stringify!(RTCBuildArguments))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byteSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(byteSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buildQuality) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(buildQuality)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buildFlags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(buildFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxBranchingFactor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(maxBranchingFactor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxDepth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(maxDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sahBlockSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(sahBlockSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minLeafSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(minLeafSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxLeafSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(maxLeafSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traversalCost) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(traversalCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intersectionCost) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(intersectionCost)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bvh) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(bvh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitives) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(primitives)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveCount) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(primitiveCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).primitiveArrayCapacity) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(primitiveArrayCapacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createNode) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(createNode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setNodeChildren) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(setNodeChildren)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setNodeBounds) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(setNodeBounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createLeaf) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(createLeaf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splitPrimitive) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(splitPrimitive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buildProgress) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(buildProgress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userPtr) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(RTCBuildArguments),
            "::",
            stringify!(userPtr)
        )
    );
}
extern "C" {
    pub fn rtcNewBVH(device: RTCDevice) -> RTCBVH;
}
extern "C" {
    pub fn rtcBuildBVH(args: *const RTCBuildArguments) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcThreadLocalAlloc(
        allocator: RTCThreadLocalAllocator,
        bytes: usize,
        align: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rtcRetainBVH(bvh: RTCBVH);
}
extern "C" {
    pub fn rtcReleaseBVH(bvh: RTCBVH);
}
